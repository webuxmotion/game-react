{"ast":null,"code":"import{createMachine,forwardTo,send}from\"xstate\";import{playerMachine}from\"../playerMachine\";import{isEqual}from\"lodash\";import{choose}from\"xstate/lib/actions\";import{DOOR_COORDS,TREASURE_COORDS}from\"../../constants\";import{monsterMachine}from\"../monsterMachine\";export var gameMachine=createMachine({id:\"game\",initial:\"home\",states:{home:{on:{START_BUTTON_CLICKED:\"playing\"}},playing:{invoke:{id:\"playerActor\",src:\"playerMachine\"},on:{PLAYER_DIED:\"gameOver\",PLAYER_GOT_TREASURE:\"gameComplete\"},initial:\"level1\",states:{level1:{on:{PLAYER_WALKED_THROUGH_DOOR:\"level2\",PLAYER_MOVED:{actions:\"onPlayerMoved\"}}},level2:{invoke:{id:\"monsterActor\",src:\"monsterMachine\"},entry:\"resetPlayerCoords\",on:{PLAYER_WALKED_THROUGH_DOOR:\"level3\",PLAYER_MOVED:{actions:\"onPlayerMoved\"},ATTACK_PLAYER:{actions:\"forwardToPlayer\"}}},level3:{entry:\"resetPlayerCoords\",on:{PLAYER_MOVED:{actions:\"onPlayerMovedFinalLevel\"}}}}},gameOver:{on:{RESTART_BUTTON_CLICKED:\"playing\"}},gameComplete:{on:{HOME_BUTTON_CLICKED:\"home\"}}}},{actions:{onPlayerMoved:choose([{cond:\"isPlayerAtDoor\",actions:\"playerWalkedThroughDoor\"},{cond:\"isMonster\",actions:\"forwardToMonster\"}]),onPlayerMovedFinalLevel:choose([{cond:\"isPlayerAtTreasure\",actions:\"playerGotTreasure\"}]),playerWalkedThroughDoor:send(\"PLAYER_WALKED_THROUGH_DOOR\"),resetPlayerCoords:send(\"RESET_PLAYER_COORDS\",{to:\"playerActor\"}),playerGotTreasure:send(\"PLAYER_GOT_TREASURE\"),forwardToMonster:forwardTo(\"monsterActor\"),forwardToPlayer:forwardTo(\"playerActor\")},guards:{isMonster:function isMonster(context,event,condMeta){return!!condMeta.state.children.monsterActor;},isPlayerAtDoor:function isPlayerAtDoor(_,event){if(event.type===\"PLAYER_MOVED\"){var coords=event.coords;return isEqual(coords,DOOR_COORDS);}return false;},isPlayerAtTreasure:function isPlayerAtTreasure(_,event){if(event.type===\"PLAYER_MOVED\"){var coords=event.coords;return isEqual(coords,TREASURE_COORDS);}return false;}},services:{monsterMachine:monsterMachine,playerMachine:playerMachine}});","map":{"version":3,"sources":["/Users/andriipereverziev/Projects/game-react/src/machines/gameMachine/index.ts"],"names":["createMachine","forwardTo","send","playerMachine","isEqual","choose","DOOR_COORDS","TREASURE_COORDS","monsterMachine","gameMachine","id","initial","states","home","on","START_BUTTON_CLICKED","playing","invoke","src","PLAYER_DIED","PLAYER_GOT_TREASURE","level1","PLAYER_WALKED_THROUGH_DOOR","PLAYER_MOVED","actions","level2","entry","ATTACK_PLAYER","level3","gameOver","RESTART_BUTTON_CLICKED","gameComplete","HOME_BUTTON_CLICKED","onPlayerMoved","cond","onPlayerMovedFinalLevel","playerWalkedThroughDoor","resetPlayerCoords","to","playerGotTreasure","forwardToMonster","forwardToPlayer","guards","isMonster","context","event","condMeta","state","children","monsterActor","isPlayerAtDoor","_","type","coords","isPlayerAtTreasure","services"],"mappings":"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","sourcesContent":["import { createMachine, forwardTo, send } from \"xstate\";\nimport { GameEventType, GameStateType } from \"./types\";\nimport { playerMachine } from \"../playerMachine\";\nimport { isEqual } from \"lodash\";\nimport { choose } from \"xstate/lib/actions\";\nimport { DOOR_COORDS, TREASURE_COORDS } from \"../../constants\";\nimport { monsterMachine } from \"../monsterMachine\";\n\nexport const gameMachine = createMachine<null, GameEventType, GameStateType>(\n    {\n        id: `game`,\n        initial: `home`,\n        states: {\n            home: {\n                on: {\n                    START_BUTTON_CLICKED: \"playing\",\n                },\n            },\n            playing: {\n                invoke: {\n                    id: `playerActor`,\n                    src: `playerMachine`,\n                },\n                on: {\n                    PLAYER_DIED: \"gameOver\",\n                    PLAYER_GOT_TREASURE: \"gameComplete\",\n                },\n                initial: `level1`,\n                states: {\n                    level1: {\n                        on: {\n                            PLAYER_WALKED_THROUGH_DOOR: \"level2\",\n                            PLAYER_MOVED: {\n                                actions: `onPlayerMoved`,\n                            },\n                        },\n                    },\n                    level2: {\n                        invoke: {\n                            id: `monsterActor`,\n                            src: `monsterMachine`,\n                        },\n                        entry: `resetPlayerCoords`,\n                        on: {\n                            PLAYER_WALKED_THROUGH_DOOR: \"level3\",\n                            PLAYER_MOVED: {\n                                actions: `onPlayerMoved`,\n                            },\n                            ATTACK_PLAYER: {\n                                actions: \"forwardToPlayer\",\n                            },\n                        },\n                    },\n                    level3: {\n                        entry: `resetPlayerCoords`,\n                        on: {\n                            PLAYER_MOVED: {\n                                actions: `onPlayerMovedFinalLevel`,\n                            },\n                        },\n                    },\n                },\n            },\n            gameOver: {\n                on: {\n                    RESTART_BUTTON_CLICKED: \"playing\",\n                },\n            },\n            gameComplete: {\n                on: {\n                    HOME_BUTTON_CLICKED: \"home\",\n                },\n            },\n        },\n    },\n    {\n        actions: {\n            onPlayerMoved: choose([\n                {\n                    cond: `isPlayerAtDoor`,\n                    actions: `playerWalkedThroughDoor`,\n                },\n                {\n                    cond: `isMonster`,\n                    actions: `forwardToMonster`,\n                },\n            ]),\n            onPlayerMovedFinalLevel: choose([\n                {\n                    cond: `isPlayerAtTreasure`,\n                    actions: `playerGotTreasure`,\n                },\n            ]),\n            playerWalkedThroughDoor: send(\"PLAYER_WALKED_THROUGH_DOOR\"),\n            resetPlayerCoords: send(\"RESET_PLAYER_COORDS\", {\n                to: `playerActor`,\n            }),\n            playerGotTreasure: send(\"PLAYER_GOT_TREASURE\"),\n            forwardToMonster: forwardTo(`monsterActor`),\n            forwardToPlayer: forwardTo(`playerActor`),\n        },\n        guards: {\n            isMonster: (context, event, condMeta) =>\n                !!condMeta.state.children.monsterActor,\n            isPlayerAtDoor: (_, event) => {\n                if (event.type === \"PLAYER_MOVED\") {\n                    const { coords } = event;\n                    return isEqual(coords, DOOR_COORDS);\n                }\n\n                return false;\n            },\n            isPlayerAtTreasure: (_, event) => {\n                if (event.type === \"PLAYER_MOVED\") {\n                    const { coords } = event;\n                    return isEqual(coords, TREASURE_COORDS);\n                }\n\n                return false;\n            },\n        },\n        services: {\n            monsterMachine,\n            playerMachine,\n        },\n    }\n);\n"]},"metadata":{},"sourceType":"module"}