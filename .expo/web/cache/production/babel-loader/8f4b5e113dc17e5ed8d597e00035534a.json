{"ast":null,"code":"import{isEqual}from\"lodash\";import{assign,createMachine}from\"xstate\";import{choose,sendParent}from\"xstate/lib/actions\";var coordsList=[[8,1],[8,2]];export var monsterMachine=createMachine({context:{coords:coordsList[0],playerCoords:undefined},id:\"monster\",initial:\"up\",on:{PLAYER_MOVED:{actions:[\"storePlayerCoords\",\"attemptAttack\"]}},states:{up:{entry:\"attemptAttack\",after:{2000:{actions:\"moveDown\",target:\"down\"}}},down:{entry:\"attemptAttack\",after:{2000:{actions:\"moveUp\",target:\"up\"}}}}},{actions:{moveDown:assign(function(){return{coords:coordsList[1]};}),moveUp:assign(function(){return{coords:coordsList[0]};}),storePlayerCoords:assign(function(context,event){return{playerCoords:event.coords};}),attemptAttack:choose([{actions:\"attack\",cond:\"isMonsterPlayerCoordsEqual\"}]),attack:sendParent(\"ATTACK_PLAYER\")},guards:{isMonsterPlayerCoordsEqual:function isMonsterPlayerCoordsEqual(context,event){return isEqual(context.coords,context.playerCoords);}}});","map":{"version":3,"sources":["/Users/andriipereverziev/Projects/game-react/src/machines/monsterMachine/index.ts"],"names":["isEqual","assign","createMachine","choose","sendParent","coordsList","monsterMachine","context","coords","playerCoords","undefined","id","initial","on","PLAYER_MOVED","actions","states","up","entry","after","target","down","moveDown","moveUp","storePlayerCoords","event","attemptAttack","cond","attack","guards","isMonsterPlayerCoordsEqual"],"mappings":"AAAA,OAASA,OAAT,KAAwB,QAAxB,CACA,OAASC,MAAT,CAAiBC,aAAjB,KAAsC,QAAtC,CACA,OAASC,MAAT,CAAiBC,UAAjB,KAAmC,oBAAnC,CASA,GAAMC,CAAAA,UAAwB,CAAG,CAC7B,CAAC,CAAD,CAAI,CAAJ,CAD6B,CAE7B,CAAC,CAAD,CAAI,CAAJ,CAF6B,CAAjC,CAKA,MAAO,IAAMC,CAAAA,cAAc,CAAGJ,aAAa,CAKvC,CACIK,OAAO,CAAE,CACLC,MAAM,CAAEH,UAAU,CAAC,CAAD,CADb,CAELI,YAAY,CAAEC,SAFT,CADb,CAKIC,EAAE,UALN,CAMIC,OAAO,KANX,CAOIC,EAAE,CAAE,CACAC,YAAY,CAAE,CACVC,OAAO,CAAE,qCADC,CADd,CAPR,CAYIC,MAAM,CAAE,CACJC,EAAE,CAAE,CACAC,KAAK,gBADL,CAEAC,KAAK,CAAE,CACH,KAAM,CACFJ,OAAO,WADL,CAEFK,MAAM,OAFJ,CADH,CAFP,CADA,CAUJC,IAAI,CAAE,CACFH,KAAK,gBADH,CAEFC,KAAK,CAAE,CACH,KAAM,CACFJ,OAAO,SADL,CAEFK,MAAM,KAFJ,CADH,CAFL,CAVF,CAZZ,CALuC,CAsCvC,CACIL,OAAO,CAAE,CACLO,QAAQ,CAAErB,MAAM,CAAqB,iBAAO,CACxCO,MAAM,CAAEH,UAAU,CAAC,CAAD,CADsB,CAAP,EAArB,CADX,CAILkB,MAAM,CAAEtB,MAAM,CAAqB,iBAAO,CACtCO,MAAM,CAAEH,UAAU,CAAC,CAAD,CADoB,CAAP,EAArB,CAJT,CAOLmB,iBAAiB,CAAEvB,MAAM,CACrB,SAACM,OAAD,CAAUkB,KAAV,QAAqB,CACjBhB,YAAY,CAAEgB,KAAK,CAACjB,MADH,CAArB,EADqB,CAPpB,CAYLkB,aAAa,CAAEvB,MAAM,CAAC,CAClB,CACIY,OAAO,SADX,CAEIY,IAAI,6BAFR,CADkB,CAAD,CAZhB,CAkBLC,MAAM,CAAExB,UAAU,CAAC,eAAD,CAlBb,CADb,CAqBIyB,MAAM,CAAE,CACJC,0BAA0B,CAAE,oCAACvB,OAAD,CAAUkB,KAAV,QACxBzB,CAAAA,OAAO,CAACO,OAAO,CAACC,MAAT,CAAiBD,OAAO,CAACE,YAAzB,CADiB,EADxB,CArBZ,CAtCuC,CAApC","sourcesContent":["import { isEqual } from \"lodash\";\nimport { assign, createMachine } from \"xstate\";\nimport { choose, sendParent } from \"xstate/lib/actions\";\nimport { CoordsType } from \"../../types\";\nimport { PlayerMovedType } from \"../gameMachine/types\";\nimport {\n    MonsterContextType,\n    MonsterEventsType,\n    MonsterStateType,\n} from \"./types\";\n\nconst coordsList: CoordsType[] = [\n    [8, 1],\n    [8, 2],\n];\n\nexport const monsterMachine = createMachine<\n    MonsterContextType,\n    MonsterEventsType,\n    MonsterStateType\n>(\n    {\n        context: {\n            coords: coordsList[0],\n            playerCoords: undefined,\n        },\n        id: `monster`,\n        initial: `up`,\n        on: {\n            PLAYER_MOVED: {\n                actions: [`storePlayerCoords`, `attemptAttack`],\n            },\n        },\n        states: {\n            up: {\n                entry: `attemptAttack`,\n                after: {\n                    2000: {\n                        actions: `moveDown`,\n                        target: `down`,\n                    },\n                },\n            },\n            down: {\n                entry: `attemptAttack`,\n                after: {\n                    2000: {\n                        actions: `moveUp`,\n                        target: `up`,\n                    },\n                },\n            },\n        },\n    },\n    {\n        actions: {\n            moveDown: assign<MonsterContextType>(() => ({\n                coords: coordsList[1],\n            })) as any,\n            moveUp: assign<MonsterContextType>(() => ({\n                coords: coordsList[0],\n            })) as any,\n            storePlayerCoords: assign<MonsterContextType, PlayerMovedType>(\n                (context, event) => ({\n                    playerCoords: event.coords,\n                })\n            ),\n            attemptAttack: choose([\n                {\n                    actions: `attack`,\n                    cond: `isMonsterPlayerCoordsEqual`,\n                },\n            ]),\n            attack: sendParent(\"ATTACK_PLAYER\"),\n        },\n        guards: {\n            isMonsterPlayerCoordsEqual: (context, event) =>\n                isEqual(context.coords, context.playerCoords),\n        },\n    }\n);\n"]},"metadata":{},"sourceType":"module"}