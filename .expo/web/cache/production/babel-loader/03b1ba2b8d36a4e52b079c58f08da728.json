{"ast":null,"code":"import{createMachine}from\"xstate\";import{assign,choose,sendParent}from\"xstate/lib/actions\";import{PLAYER_STARTING_COORDS,PLAYER_STARTING_HEALTH}from\"../../constants\";import{getTargetCoords}from\"../../util/getTargetCoords\";import{isCoordsOnGrid}from\"../../util/isCoordsOnGrid\";export var playerMachine=createMachine({context:{coords:PLAYER_STARTING_COORDS,health:PLAYER_STARTING_HEALTH},id:\"player\",initial:\"alive\",states:{alive:{on:{ARROW_BUTTON_CLICKED:{actions:\"onArrowButtonClick\"},RESET_PLAYER_COORDS:{actions:\"resetCoords\"},ATTACK_PLAYER:{actions:\"reduceHealth\",target:\"determining\"}}},dead:{},determining:{always:[{cond:\"isHealth0\",target:\"dead\",actions:\"broadcastPlayerDied\"},{target:\"alive\"}]}}},{actions:{onArrowButtonClick:choose([{cond:\"isSquareAvailable\",actions:[\"move\",\"broadcastPlayerMoved\"]}]),resetCoords:assign(function(){return{coords:PLAYER_STARTING_COORDS};}),broadcastPlayerMoved:sendParent(function(context){var coords=context.coords;var event={type:\"PLAYER_MOVED\",coords:coords};return event;}),broadcastPlayerDied:sendParent(\"PLAYER_DIED\"),move:assign(function(context,event){var coords=context.coords;var direction=event.direction;var targetCoords=getTargetCoords({coords:coords,direction:direction});return{coords:targetCoords};}),reduceHealth:assign(function(context){return{health:context.health-1};})},guards:{isSquareAvailable:function isSquareAvailable(context,event){if(event.type===\"ARROW_BUTTON_CLICKED\"){var coords=context.coords;var direction=event.direction;var targetCoords=getTargetCoords({coords:coords,direction:direction});return isCoordsOnGrid(targetCoords);}return false;},isHealth0:function isHealth0(context){var health=context.health;return health===0;}}});","map":{"version":3,"sources":["/Users/andriipereverziev/Projects/game-react/src/machines/playerMachine/index.ts"],"names":["createMachine","assign","choose","sendParent","PLAYER_STARTING_COORDS","PLAYER_STARTING_HEALTH","getTargetCoords","isCoordsOnGrid","playerMachine","context","coords","health","id","initial","states","alive","on","ARROW_BUTTON_CLICKED","actions","RESET_PLAYER_COORDS","ATTACK_PLAYER","target","dead","determining","always","cond","onArrowButtonClick","resetCoords","broadcastPlayerMoved","event","type","broadcastPlayerDied","move","direction","targetCoords","reduceHealth","guards","isSquareAvailable","isHealth0"],"mappings":"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","sourcesContent":["import { createMachine } from \"xstate\";\nimport { assign, choose, sendParent } from \"xstate/lib/actions\";\nimport {\n    PLAYER_STARTING_COORDS,\n    PLAYER_STARTING_HEALTH,\n} from \"../../constants\";\nimport { getTargetCoords } from \"../../util/getTargetCoords\";\nimport { isCoordsOnGrid } from \"../../util/isCoordsOnGrid\";\nimport { PlayerMovedType } from \"../gameMachine/types\";\nimport {\n    ArrowButtonClickedType,\n    PlayerContextType,\n    PlayerEventType,\n    PlayerStateType,\n} from \"./types\";\n\nexport const playerMachine = createMachine<\n    PlayerContextType,\n    PlayerEventType,\n    PlayerStateType\n>(\n    {\n        context: {\n            coords: PLAYER_STARTING_COORDS,\n            health: PLAYER_STARTING_HEALTH,\n        },\n        id: `player`,\n        initial: `alive`,\n        states: {\n            alive: {\n                on: {\n                    ARROW_BUTTON_CLICKED: {\n                        actions: `onArrowButtonClick`,\n                    },\n                    RESET_PLAYER_COORDS: {\n                        actions: `resetCoords`,\n                    },\n                    ATTACK_PLAYER: {\n                        actions: `reduceHealth`,\n                        target: `determining`,\n                    },\n                },\n            },\n            dead: {},\n            determining: {\n                always: [\n                    {\n                        cond: `isHealth0`,\n                        target: `dead`,\n                        actions: `broadcastPlayerDied`,\n                    },\n                    {\n                        target: `alive`,\n                    },\n                ],\n            },\n        },\n    },\n    {\n        actions: {\n            onArrowButtonClick: choose([\n                {\n                    cond: `isSquareAvailable`,\n                    actions: [`move`, `broadcastPlayerMoved`],\n                },\n            ]),\n            resetCoords: assign<PlayerContextType>(() => ({\n                coords: PLAYER_STARTING_COORDS,\n            })) as any,\n            broadcastPlayerMoved: sendParent((context) => {\n                const { coords } = context;\n                const event: PlayerMovedType = {\n                    type: \"PLAYER_MOVED\",\n                    coords,\n                };\n\n                return event;\n            }),\n            broadcastPlayerDied: sendParent(\"PLAYER_DIED\"),\n            move: assign<PlayerContextType, ArrowButtonClickedType>(\n                (context, event) => {\n                    const { coords } = context;\n                    const { direction } = event;\n                    const targetCoords = getTargetCoords({ coords, direction });\n\n                    return {\n                        coords: targetCoords,\n                    };\n                }\n            ) as any,\n            reduceHealth: assign<PlayerContextType>((context) => ({\n                health: context.health - 1,\n            })) as any,\n        },\n        guards: {\n            isSquareAvailable: (\n                context: PlayerContextType,\n                event: PlayerEventType\n            ) => {\n                if (event.type === \"ARROW_BUTTON_CLICKED\") {\n                    const { coords } = context;\n                    const { direction } = event;\n                    const targetCoords = getTargetCoords({ coords, direction });\n\n                    return isCoordsOnGrid(targetCoords);\n                }\n\n                return false;\n            },\n            isHealth0: (context: PlayerContextType) => {\n                const { health } = context;\n\n                return health === 0;\n            },\n        },\n    }\n);\n"]},"metadata":{},"sourceType":"module"}